rbac:
  # Specifies whether rbac resources must be created.
  create: true
  # The API version to use while creating the rbac resources. Use `kubectl api-versions | grep rbac` to find which abi versions are supported for your cluster.
  apiVersion: v1
  # Create a cluster role binding with the existing role, do not create a new one. If left blank, a new cluster role is created.
  roleRef: admin

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  # If create is false and a name is not specified, the default service account is used for the cluster role binding.
  # empty defaults to: include "app.fullname" $)
  name:

role:
  ## Rules to create. It follows the role specification
  rules:
    - apiGroups:
        - "*"
      resources:
        - "*"
      verbs:
        - get
        - list
        - watch
        - describe
        - exec
        - update
        - delete
      resourceNames:
        - role-secret

ingress:
  issuerName: selfsigned #letsencrypt
  issuerKind: Issuer
  class: nginx
  annotations:
    kubernetes.io/tls-acme: "true"
    kubernetes.io/secure-backends: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  hosts:
    - host: api.go-api-boilerplate.local
      paths:
        - path: /auth(/|$)(.*)
          backend:
            serviceName: go-api-boilerplate-auth
            servicePort: 3000
        - path: /users(/|$)(.*)
          backend:
            serviceName: go-api-boilerplate-user
            servicePort: 3000
    - host: maildev.go-api-boilerplate.local
      paths:
        - path: /(|$)(.*)
          backend:
            serviceName: go-api-boilerplate-maildev
            servicePort: 1080
  tls:
    - secretName: go-api-boilerplate-tls
      hosts:
        - go-api-boilerplate.local
        - api.go-api-boilerplate.local
        - maildev.go-api-boilerplate.local

nginx-ingress:
  tcp:
    3306: "go-api-boilerplate/go-api-boilerplate-mysql:3306"

cert-manager:
  # https://cert-manager.io/docs/installation/upgrading/upgrading-0.14-0.15/#new-installcrds-addition
  installCRDs: true #@ FIXME change to false if `Error: UPGRADE FAILED: rendered manifests contain a new resource that already exists.`
  ingressShim:
    defaultIssuerName: selfsigned #letsencrypt
    defaultIssuerKind: Issuer
  # Override the namespace used to store DNS provider credentials etc. for ClusterIssuer
  # resources. By default, the same namespace as cert-manager is deployed within is
  # used. This namespace will not be automatically created by the Helm chart.
  clusterResourceNamespace: go-api-boilerplate
  extraArgs:
    # Use this flag to set a namespace that cert-manager will use to store
    # supporting resources required for each ClusterIssuer (default is kube-system)
    - --cluster-resource-namespace=go-api-boilerplate

issuer:
  name: selfsigned
  kind: Issuer
  selfSigned: true
  # name: letsencrypt
  # kind: Issuer
  # server: https://acme-v02.api.letsencrypt.org/directory
  # email: example@example.com
  # secretName: go-api-boilerplate-tls
  # http01: true

mysql:
  existingSecret: mysql-secret
  mysqlUser: goapiboilerplate
  initializationFiles:
    privileges.sql: |-
      GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
      GRANT ALL PRIVILEGES ON *.* TO 'goapiboilerplate'@'%' WITH GRANT OPTION;
      FLUSH PRIVILEGES;
    base_schema.sql: |-
      CREATE DATABASE IF NOT EXISTS goapiboilerplate DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;

maildev:
  nameOverride: maildev
  image:
    repository: maildev/maildev
    tag: 2.0.0-beta3
    pullPolicy: IfNotPresent
  service:
    ports:
      - name: maildev
        internalPort: 1025
        externalPort: 1025
      - name: ui
        internalPort: 1080
        externalPort: 1080
  env:
    - name: MAILDEV_INCOMING_USER
      valueFrom:
        secretKeyRef:
          key: MAILER_USER
          name: mail-secret
    - name: MAILDEV_INCOMING_PASS
      valueFrom:
        secretKeyRef:
          key: MAILER_PASSWORD
          name: mail-secret

web:
  nameOverride: web
  imagePullSecrets: regcred
  image:
    repository: go-api-boilerplate-web
    tag: latest
    pullPolicy: Never
  service:
    ports:
      - name: http
        internalPort: 3000
        externalPort: 3000

auth:
  nameOverride: auth
  image:
    repository: go-api-boilerplate-auth
    tag: latest
    pullPolicy: Never
  service:
    ports:
      - name: http
        internalPort: 3000
        externalPort: 3000
      - name: grpc
        internalPort: 3001
        externalPort: 3001
  initContainers:
    - name: migrations
      image:
        repository: go-api-boilerplate-migrate
        tag: latest
        pullPolicy: IfNotPresent
      command:
        - '/migrate'
      args:
        - '-source'
        - 'file:///migrations'
        - '-database'
        - 'mysql://root:password@tcp(go-api-boilerplate-mysql:3306)/goapiboilerplate?multiStatements=true' # @TODO: think of a better way of passing user:password data
        - 'up'
  envFromSecretRefs:
    - auth-secret
    - user-secret
  envFromConfigMapRefs:
    - app-config
    - http-config
    - grpc-config
    - mysql-config
    - auth-config
    # - aws-config
  env:
    - name: MYSQL_PASS
      valueFrom:
        secretKeyRef:
          key: mysql-password
          name: mysql-secret
  readiness:
    initialDelaySeconds: 20
    timeoutSeconds: 5
    httpGet:
      path: /readiness
      port: 3000
  liveness:
    initialDelaySeconds: 20
    httpGet:
      path: /health
      port: 3000

user:
  nameOverride: user
  image:
    repository: go-api-boilerplate-user
    tag: latest
    pullPolicy: Never
  service:
    ports:
      - name: http
        internalPort: 3000
        externalPort: 3000
      - name: grpc
        internalPort: 3001
        externalPort: 3001
  initContainers:
    - name: migrations
      image:
        repository: go-api-boilerplate-migrate
        tag: latest
        pullPolicy: IfNotPresent
      command:
        - '/migrate'
      args:
        - '-source'
        - 'file:///migrations'
        - '-database'
        - 'mysql://root:password@tcp(go-api-boilerplate-mysql:3306)/goapiboilerplate?multiStatements=true' # @TODO: think of a better way of passing user:password data
        - 'up'
  envFromSecretRefs:
    - auth-secret
    - user-secret
    - mail-secret
  envFromConfigMapRefs:
    - app-config
    - http-config
    - grpc-config
    - mysql-config
    - user-config
    # - aws-config
  env:
    - name: MYSQL_PASS
      valueFrom:
        secretKeyRef:
          key: mysql-password
          name: mysql-secret
  readiness:
    initialDelaySeconds: 20
    timeoutSeconds: 5
    httpGet:
      path: /readiness
      port: 3000
  liveness:
    initialDelaySeconds: 20
    httpGet:
      path: /health
      port: 3000

secrets:
  - name: mysql-secret
    type: Opaque
    data:
      mysql-root-password: cGFzc3dvcmQ= # @FIXME: change password (remember its base64 encoded here)
      mysql-password: MDdxVmFpNGRsMVFtR2VXcjNDUUlBcGhxZUFSOVRLNWo= # @FIXME: change password (remember its base64 encoded here)
  - name: auth-secret
    type: Opaque
    data:
      AUTH_SECRET: ekxrd0tHc1BWQ3VJUWpiZGRsV2ZMeVVvMEt4Mm5lS3Y= # @FIXME: change secret value (remember its base64 encoded here)
  - name: user-secret
    type: Opaque
    data:
      USER_SECRET: a1lpYm51WlA0b1FFNUVMRDYyN21EaVFyaFB6VmxGT1M= # @FIXME: change secret value (remember its base64 encoded here)
      USER_CLIENT_ID: MDc5ODE3M2UtNjE0Yy00Zjc4LTk5NmItZTllNjNlMDFlZDIw # @FIXME: change 0798173e-614c-4f78-996b-e9e63e01ed20 (its base64 encoded here)
      USER_CLIENT_SECRET: MDc5ODE3M2UtNjE0Yy00Zjc4LTk5NmItZTllNjNlMDFlZDIw # @FIXME: change 0798173e-614c-4f78-996b-e9e63e01ed20 (its base64 encoded here)
  - name: mail-secret
    type: Opaque
    data:
      MAILER_USER: 'user' # @FIXME
      MAILER_PASSWORD: 'pass' # @FIXME
  - name: role-secret
    type: Opaque
    data:
      csrf: ""

configMaps:
  - name: app-config
    data:
      APP_ENV: development
        APP_DOMAIN: 'https://go-api-boilerplate.local'
      APP_SHUTDOWN_TIMEOUT: '5s'
      APP_EVENT_HANDLER_TIMEOUT: '120s'
  - name: http-config
    data:
      HTTP_PORT: '3000'
      HTTP_ORIGINS: https://go-api-boilerplate.local|https://api.go-api-boilerplate.local|http://localhost:3000|http://0.0.0.0:3000|http://127.0.0.1:3000
  - name: grpc-config
    data:
      GRPC_PORT: '3001'
  - name: mysql-config
    data:
      MYSQL_HOST: 'go-api-boilerplate-mysql'
      MYSQL_PORT: '3306'
      MYSQL_DATABASE: 'goapiboilerplate'
      MYSQL_USER: 'goapiboilerplate'
  - name: auth-config
    data:
      HOST: '0.0.0.0'
      COMMAND_BUS_BUFFER: '100'
        AUTH_AUTHORIZE_URL: 'https://go-api-boilerplate.local/authorize'
      USER_HOST: 'go-api-boilerplate-user'
      OAUTH_INIT_TIMEOUT: '15s'     # wait 15 sec for oauth server to initialize
      GRPC_SERVER_MIN_TIME: '5m'    # if a client pings more than once every 5 minutes (default), terminate the connection
      GRPC_SERVER_TIME: '2h'        # ping the client if it is idle for 2 hours (default) to ensure the connection is still active
      GRPC_SERVER_TIMEOUT: '20s'    # wait 20 second (default) for the ping ack before assuming the connection is dead
      GRPC_CLIENT_TIME: '10s'       # send pings every 10 seconds if there is no activity
      GRPC_CLIENT_TIMEOUT: '20s'    # wait 20 second for ping ack before considering the connection dead
      MYSQL_CONN_MAX_LIFETIME: '5m' #  sets the maximum amount of time a connection may be reused
      MYSQL_MAX_IDLE_CONNS: '0'     # sets the maximum number of connections in the idle
      MYSQL_MAX_OPEN_CONNS: '5'     # sets the maximum number of connections in the idle
  - name: user-config
    data:
      HOST: '0.0.0.0'
      COMMAND_BUS_BUFFER: '100'
      AUTH_HOST: 'go-api-boilerplate-auth'
      MAILER_HOST: 'go-api-boilerplate-maildev' # @FIXME use real smtp service
      MAILER_PORT: '1025'
      GRPC_SERVER_MIN_TIME: '5m'    # if a client pings more than once every 5 minutes (default), terminate the connection
      GRPC_SERVER_TIME: '2h'        # ping the client if it is idle for 2 hours (default) to ensure the connection is still active
      GRPC_SERVER_TIMEOUT: '20s'    # wait 20 second (default) for the ping ack before assuming the connection is dead
      GRPC_CLIENT_TIME: '10s'       # send pings every 10 seconds if there is no activity
      GRPC_CLIENT_TIMEOUT: '20s'    # wait 20 second for ping ack before considering the connection dead
      MYSQL_CONN_MAX_LIFETIME: '5m' #  sets the maximum amount of time a connection may be reused
      MYSQL_MAX_IDLE_CONNS: '0'     # sets the maximum number of connections in the idle
      MYSQL_MAX_OPEN_CONNS: '5'     # sets the maximum number of connections in the idle
      # - name: aws-config
      #   data:
      # AWS_REGION: 'us-east-1'
      # AWS_ENDPOINT: 'http://go-api-boilerplate-localstack:4569'
